Objective : Implement a memory-resident file system in a memory block 
Simulate the disk as a set of contiguous blocks in memory 
Features of the file system:
	Has to be created on a dynamically allocated memory block, e.g. using malloc().
	Inputs during file system creation:
		Size of the file system.	(Typical Value : 64MB)
		Block Size.					(Typical Value : 1 KB)
	The first block (Block-0) in the file system will contain:
		The Super Block
			Contains relevant information about the file system like:
				Block size
				Size of the file system
				Volume name
				Other relevant information (mentioned below).

The following two alternatives have to be implemented:

Alternative 1: (Linked List Implementation using FAT)
	
	Super Block also contains:
		Bit Vector
		Pointer(s) to the directory(ies).
	
	1)	The free blocks are maintained as a bit vector stored in the super block. 
		The number of bits will be equal to the number of blocks in the file system. 
		If the i-th bit is 0, then block i is free; else, it is occupied.
		C++ bitset can be used for this purpose.
	2)	The data blocks of a file are maintained using a system-wide File Allocation Table (FAT)
		It will be stored in Block-1.
	3)	The directory is stored in a fixed block (with pointer in super block). 
		Assume single-level directory. 
		Each directory entry contains a number that is an index to FAT, and indicates the first block of the respective file. 
		If the i-th entry of FAT contains j, this means block-j will logically follow block-I in the respective file.
	4) The data blocks will be stored from Block-2 onwards.

Alternative 2: (Indexed implementation using i-node)

	Super Block also contains:
		A pointer to the first free block.

	1)	The free blocks are maintained as a linked list of the blocks.  
		The last free block will contain -1 in the pointer field.
	2)	The data blocks of a file are maintained using index nodes or i-nodes. 
		Each i-node contains 
			Information about the data blocks. 
			Includes 5 direct pointers, 1 singly indirect pointer, and 1 doubly indirect pointer. 
			Each pointer will be 32 bits in size, and will indicate a block number. 
			It will also store a type field indicating whether the file is a regular file or a directory, and file size in bytes. 
		The i-nodes will be stored in Block-1 and Block-2, in increasing order of their numbers (i.e. i-node-0 first, followed by i-node-1, and so on).
	3)	The content of a directory file will be as follows. Contains
			An array of records, each of size 16 bytes. 
			The first 14 bytes stores the file name, and the last 2 bytes stores the inode number. 
			Each directory will have two special entries “.” and “..”, indicating the current directory and the parent directory, respectively. 
			For a block size of 512 bytes, 32 directory entries can be stored in each block.

The following API’s need to be supported for both the alternatives in the form of user-invocable functions from a C / C++ program. Define the parameters of the API functions appropriately.
my_open 
	opens a file for reading/writing (create if not existing)
my_close
	closes an already open file
my_read
	reads data from an already open file
my_write
	writes data into an already open file
my_mkdir
	creates a new directory
my_chdir
	changes the working directory
my_rmdir
	removes a directory along with all its contents
my_copy
	copies a file between Linux file system and your file system
my_cat
	displays the contents of the specified file